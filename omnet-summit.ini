[Config scenario_100]
description = 100 Aircraft send an app message once when entering/leaving a circle with radius 370 km from the ground station.
network = example_simulation
sim-time-limit = 10000s
repeat = 10

### Statistics Recording

**.vector-recording = false
**.scalar-recording = true
**.statistic-recording = true

### Aircrafts Mobility Model, Ground Station Coordinates and Scenario Manager
# defining the aircrafts mobility constraint area 
**.aircraft[*].mobility.constraintAreaMinX = 0m
**.aircraft[*].mobility.constraintAreaMaxX = 3000000m
**.aircraft[*].mobility.constraintAreaMinY = 0m
**.aircraft[*].mobility.constraintAreaMaxY = 1000000m
**.aircraft[*].mobility.constraintAreaMinZ = 0m
**.aircraft[*].mobility.constraintAreaMaxZ = 18000m

# defining the aircrafts model
**.aircraft[*].mobility.typename = "BonnMotionMobility"
**.aircraft[*].mobility.traceFile = "Simulation_data_100_aircraft/mobility.txt"
**.aircraft[*].mobility.is3D = true
**.aircraft[*].mobility.nodeId = -1

# scenario manager that turns on/off aircraft based on their startTime and stopTime 
*.scenarioManager.script = xmldoc("Simulation_data_100_aircraft/scenario.xml")

### NIC Settings     
**.ipv4.arp.typename = "GlobalArp"
**.**.bitrate = 100Mbps 
**.configurator.typename = "HostAutoConfigurator"
**.configurator.interfaces = "wlan0"

**.wlan[0].radio.transmitter.communicationRange = 800000m
**.wlan[0].radio.receiver.ignoreInterference = true
**.wlan[*].radio.transmitter.interferenceRange = 0m
**.wlan[*].radio.transmitter.detectionRange = 800000m


**.wlan[0].radio.typename = "TraceBasedRadio"

#Parameterizing
**.wlan[0].radio.receiver.Receiver_bandwidth_in_KHz=500 #in kHz
**.wlan[0].radio.receiver.Tx_power=42 #in dBm 
**.wlan[0].radio.receiver.Tx_antenna_gain=3 #in dBi
**.wlan[0].radio.receiver.Rx_antenna_gain=3  #in dBi
**.wlan[0].radio.receiver.Tx_loss=4 #in dB
**.wlan[0].radio.receiver.Rx_loss=4 #in dB
**.wlan[0].radio.receiver.Noise_figure=6 #in dB
**.wlan[0].radio.receiver.Thermal_noise_density=-174 #in dBm/Hz
**.wlan[0].radio.receiver.frequency=960 #in MHz
**.wlan[0].radio.receiver.SNR_margin=0 #in dB

#assigning name of the trace file to the error model
**.wlan[0].radio.receiver.errorModel.TraceFileName="per_snr.txt"

# TDMA-like MAC
**.wlan[*].typename = "TdmaInterface"
**.slotDuration= 2ms
**.frameLength = 10
**.wlan[*].mac.headerLength = 23B
**.wlan[*].mac.ackTimeout= 1.99ms
# num of retries is zero then packets are not retransmitetd when they are lost
**.wlan[*].mac.numRetries= 0
**.rlc.typename = "DummyRlc"

### Data Traffic Applications
*.aircraft[*].numApps = 1
*.aircraft[*].app[*].typename = "UdpTraceBasedApp"

*.aircraft[*].app[0].destAddresses = "groundStation"
*.aircraft[*].app[0].traceFile = "Simulation_data_100_aircraft/data-traffic/data_aircraft_" + string(parentIndex()) + ".csv"
*.aircraft[*].app[0].destPort = 1000
*.aircraft[*].app[0].messageLength = 1000B

*.groundStation.numApps = 1
*.groundStation.app[*].typename = "UdpSink"
*.groundStation.app[*].localPort = 1000


#-----------------------------------------------------------------------------
[Config scenario_200]
description = 200 Aircraft send an app message once when entering/leaving a circle with radius 370 km from the ground station.
extends = scenario_100

# defining the aircrafts model
**.aircraft[*].mobility.typename = "BonnMotionMobility"
**.aircraft[*].mobility.traceFile = "Simulation_data_200_aircraft/mobility.txt"
**.aircraft[*].mobility.is3D = true
**.aircraft[*].mobility.nodeId = -1

# scenario manager that turns on/off aircraft based on their startTime and stopTime 
*.scenarioManager.script = xmldoc("Simulation_data_200_aircraft/scenario.xml")

### Data Traffic Applications
*.aircraft[*].numApps = 1
*.aircraft[*].app[*].typename = "UdpTraceBasedApp"

*.aircraft[*].app[0].destAddresses = "groundStation"
*.aircraft[*].app[0].traceFile = "Simulation_data_200_aircraft/data-traffic/data_aircraft_" + string(parentIndex()) + ".csv"
*.aircraft[*].app[0].destPort = 1000
*.aircraft[*].app[0].messageLength = 1000B

*.groundStation.numApps = 1
*.groundStation.app[*].typename = "UdpSink"
*.groundStation.app[*].localPort = 1000

#-----------------------------------------------------------------------------
[Config scenario_300]
description = 300 Aircraft send an app message once when entering/leaving a circle with radius 370 km from the ground station.
extends = scenario_100

# defining the aircrafts model
**.aircraft[*].mobility.typename = "BonnMotionMobility"
**.aircraft[*].mobility.traceFile = "Simulation_data_300_aircraft/mobility.txt"
**.aircraft[*].mobility.is3D = true
**.aircraft[*].mobility.nodeId = -1

# scenario manager that turns on/off aircraft based on their startTime and stopTime 
*.scenarioManager.script = xmldoc("Simulation_data_300_aircraft/scenario.xml")

### Data Traffic Applications
*.aircraft[*].numApps = 1
*.aircraft[*].app[*].typename = "UdpTraceBasedApp"

*.aircraft[*].app[0].destAddresses = "groundStation"
*.aircraft[*].app[0].traceFile = "Simulation_data_300_aircraft/data-traffic/data_aircraft_" + string(parentIndex()) + ".csv"
*.aircraft[*].app[0].destPort = 1000
*.aircraft[*].app[0].messageLength = 1000B

*.groundStation.numApps = 1
*.groundStation.app[*].typename = "UdpSink"
*.groundStation.app[*].localPort = 1000

#-----------------------------------------------------------------------------
[Config scenario_400]
description = 400 Aircraft send an app message once when entering/leaving a circle with radius 370 km from the ground station.
extends = scenario_100

# defining the aircrafts model
**.aircraft[*].mobility.typename = "BonnMotionMobility"
**.aircraft[*].mobility.traceFile = "Simulation_data_400_aircraft/mobility.txt"
**.aircraft[*].mobility.is3D = true
**.aircraft[*].mobility.nodeId = -1

# scenario manager that turns on/off aircraft based on their startTime and stopTime 
*.scenarioManager.script = xmldoc("Simulation_data_400_aircraft/scenario.xml")

### Data Traffic Applications
*.aircraft[*].numApps = 1
*.aircraft[*].app[*].typename = "UdpTraceBasedApp"

*.aircraft[*].app[0].destAddresses = "groundStation"
*.aircraft[*].app[0].traceFile = "Simulation_data_400_aircraft/data-traffic/data_aircraft_" + string(parentIndex()) + ".csv"
*.aircraft[*].app[0].destPort = 1000
*.aircraft[*].app[0].messageLength = 1000B

*.groundStation.numApps = 1
*.groundStation.app[*].typename = "UdpSink"
*.groundStation.app[*].localPort = 1000

#-----------------------------------------------------------------------------
[Config scenario_500]
description = 500 Aircraft send an app message once when entering/leaving a circle with radius 370 km from the ground station.
extends = scenario_100

# defining the aircrafts model
**.aircraft[*].mobility.typename = "BonnMotionMobility"
**.aircraft[*].mobility.traceFile = "Simulation_data_500_aircraft/mobility.txt"
**.aircraft[*].mobility.is3D = true
**.aircraft[*].mobility.nodeId = -1

# scenario manager that turns on/off aircraft based on their startTime and stopTime 
*.scenarioManager.script = xmldoc("Simulation_data_500_aircraft/scenario.xml")

### Data Traffic Applications
*.aircraft[*].numApps = 1
*.aircraft[*].app[*].typename = "UdpTraceBasedApp"

*.aircraft[*].app[0].destAddresses = "groundStation"
*.aircraft[*].app[0].traceFile = "Simulation_data_500_aircraft/data-traffic/data_aircraft_" + string(parentIndex()) + ".csv"
*.aircraft[*].app[0].destPort = 1000
*.aircraft[*].app[0].messageLength = 1000B

*.groundStation.numApps = 1
*.groundStation.app[*].typename = "UdpSink"
*.groundStation.app[*].localPort = 1000




